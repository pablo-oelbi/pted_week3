---
title: "Exercise 3"
---

## Demo
```{r}
library("readr")
library("tidyr")
library("dplyr") # to manipulate (tabular) data
library("ggplot2") # to visualize data

wildschwein <- read_csv("wildschwein_BE_2056.csv")

wildschwein$TierName |> unique()



sabi <- wildschwein |> 
  filter(TierName == "Sabi") |> 
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz = "UTC"), 
         DatetimeUTC < as.POSIXct("2015-07-03", tz = "UTC"))

ggplot(sabi, aes(E,N, color = DatetimeUTC)) +
  geom_point() +
  geom_path() +
  coord_equal()

sabi |> 
  head(50) |> 
  ggplot(aes(DatetimeUTC, 1)) +
  geom_point()

sabi <- sabi|> 
  mutate(
    n_plus1 = sqrt((lead(E)-E)^2 + (lead(N)-N)^2),
    n_plus2 = sqrt((lead(E, 2)-E)^2 + (lead(N, 2)-N)^2),
    n_minus1 = sqrt((lag(E)-E)^2 + (lag(N)-N)^2),
    n_minus2 = sqrt((lag(E, 2)-E)^2 + (lag(N, 2)-N)^2),
  )


sabi <- sabi |>
  rowwise() |> 
  mutate(
    stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
  ) |> 
  ungroup()

ggplot(sabi, aes(stepMean)) +
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(sabi$stepMean, na.rm = TRUE))

sabi |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE)) |> 
  ggplot(aes(E,N)) +
  geom_path() +
  geom_point(aes(color = static)) +
  coord_fixed()
```

## Preperation
```{r}
library("sf")
posmo <- read_delim("data/posmo_data.csv")
# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)
posmo <- posmo |> 
  drop_na(lon_x)
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)

posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-04-14")

head(posmo)
```

