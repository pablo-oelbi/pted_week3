---
title: "Exercise 3"
---

## Demo
```{r}
library("readr")
library("tidyr")
library("dplyr") # to manipulate (tabular) data
library("ggplot2") # to visualize data

wildschwein <- read_csv("wildschwein_BE_2056.csv")

wildschwein$TierName |> unique()



sabi <- wildschwein |> 
  filter(TierName == "Sabi") |> 
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz = "UTC"), 
         DatetimeUTC < as.POSIXct("2015-07-03", tz = "UTC"))

ggplot(sabi, aes(E,N, color = DatetimeUTC)) +
  geom_point() +
  geom_path() +
  coord_equal()

sabi |> 
  head(50) |> 
  ggplot(aes(DatetimeUTC, 1)) +
  geom_point()

sabi <- sabi|> 
  mutate(
    n_plus1 = sqrt((lead(E)-E)^2 + (lead(N)-N)^2),
    n_plus2 = sqrt((lead(E, 2)-E)^2 + (lead(N, 2)-N)^2),
    n_minus1 = sqrt((lag(E)-E)^2 + (lag(N)-N)^2),
    n_minus2 = sqrt((lag(E, 2)-E)^2 + (lag(N, 2)-N)^2),
  )


sabi <- sabi |>
  rowwise() |> 
  mutate(
    stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
  ) |> 
  ungroup()

ggplot(sabi, aes(stepMean)) +
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(sabi$stepMean, na.rm = TRUE))

sabi |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE)) |> 
  ggplot(aes(E,N)) +
  geom_path() +
  geom_point(aes(color = static)) +
  coord_fixed()
```

## Preperation
```{r}
library("sf")
posmo <- read_delim("data/posmo_data.csv")
# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)
posmo <- posmo |> 
  drop_na(lon_x)
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)

posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-04-17")

head(posmo_filter)
```

## Task 1: Segmentation
### a) Specify a temporal window v:
- Sampling interval: ~10s
- Temporal window: ~60s
- Included fixes: 6
1. pos[n-3] to pos[n]
2. pos[n-2] to pos[n]
3. pos[n-1] to pos[n]
4. pos[n] to pos[n+1]
5. pos[n] to pos[n+2]
6. pos[n] to pos[n+3]


### b) Measure the distance from every point to every other point within this temporal window
```{r}
posmo_filter <- posmo_filter |> 
  mutate(
    nMinus3 = sqrt((lag(X, 3) - X)^2 + (lag(Y, 3) - Y)^2),
    nMinus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2),
    nMinus1 = sqrt((lag(X, 1) - X)^2 + (lag(Y, 1) - Y)^2),
    nPlus1  = sqrt((X - lead(X, 1))^2 + (Y - lead(Y, 1))^2),
    nPlus2  = sqrt((X - lead(X, 2))^2 + (Y - lead(Y, 2))^2),
    nPlus3  = sqrt((X - lead(X, 3))^2 + (Y - lead(Y, 3))^2)
  )

posmo_filter <- posmo_filter |> 
  rowwise() |> 
  mutate(
    stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
  ) |> 
  ungroup()
```

### c): Remove “static points”
```{r}
ggplot(posmo_filter, aes(X,Y)) +
  geom_path() +
  geom_point()

posmo_filter <- posmo_filter|> 
  ungroup() |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE)) # Task 2: Specify and apply threshold d

posmo_staticfilter <- posmo_filter |> 
  filter(!static)

posmo_staticfilter |> 
    ggplot(aes(X, Y)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

## Task 3

```{r}
posmo_filter |> 
  ggplot(aes(X,Y)) +
  geom_path() +
  geom_point(aes(color = static)) +
  coord_equal() +
  theme(legend.position = "bottom")
```

## Task 4: Segment-based analysis

```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

posmo_filter <- posmo_filter |> 
  mutate(segment_id = rle_id(static))

head(posmo_filter)

posmo_filter |> 
  ggplot(aes(X,Y)) +
  #geom_path() + #optional to connect points with a line
  geom_point(aes(color = segment_id)) +
  coord_equal() +
  theme(legend.position = "bottom")

posmo_filter |> 
  group_by(segment_id) |> 
  filter(n() > 6) |> 
  ggplot(aes(X,Y)) +
  #geom_path() + #optional to connect points with a line
  geom_point(aes(color = segment_id)) +
  coord_equal() +
  theme(legend.position = "bottom")
```

## Task 5: Similarity measures

```{r}
pedestrian <- read_delim("pedestrian.csv")


ggplot(pedestrian, aes(E,N)) +
  geom_point(data = transform(pedestrian, TrajID = NULL), colour = "grey85") +
  geom_path(colour = as.factor(pedestrian$TrajID)) +
  geom_point(colour = as.factor(pedestrian$TrajID)) +
  facet_wrap(vars(TrajID)) +
  labs(title = "Visual comparison of the 6 trajectories", subtitle = "Each subplot highlights a trajectory")
```

